# This manifest declares that we want a Prometheus cluster deployed via the
# Prometheus operator. Note, in order to use the `Prometheus` CRD, we must first
# deploy CoreOS's Prometheus Operator.
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: {{ include "prometheus.name" . }}
  labels:
    app.kubernetes.io/name: {{ include "prometheus.name" . }}
    app.kubernetes.io/environment: {{ .Values.environment }}
    helm.sh/chart: {{ include "prometheus.chart" . }}
spec:
  # Under the hood, the Prometheus Operator creates a stateful set. So we will have `#replicas`
  # pods in our stateful set.
  replicas: {{ .Values.replicaCount }}
  retention: {{ .Values.retention }}
  serviceAccountName: {{ include "prometheus.name" . }}
  serviceMonitorSelector:
    matchLabels:
{{ toYaml .Values.serviceMonitorSelectorLabels | indent 6 }}
  ruleSelector:
    matchLabels:
{{ toYaml .Values.ruleSelectorLabels | indent 6 }}
  # Configure our Prometheus instance to send alerts to the `alertmanager`
  # service.
  alerting:
    alertmanagers:
    # @TODO(mattjmcnaughton) Determine how we want prometheus, alertmanager, and
    # the prometheus operator to interact. Should they all be part of the same
    # helm chart?
    - namespace: {{ .Values.namespace }}
      name: alertmanager
      port: web
  resources:
{{ toYaml .Values.resources | indent 4 }}
  {{- if eq .Values.environment "production" }}
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: {{ include "prometheus.name" . }}-ssd
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}
