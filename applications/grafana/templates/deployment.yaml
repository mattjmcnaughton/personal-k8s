---
# This manifest declares the Deployment responsible for managing the Pods which
# run Grafana.
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      # Ensure we use the `grafana` service account we created for RBAC
      # purposes.
      serviceAccountName: grafana
      containers:
      - name: grafana
        # Need to use `grafana>=5.x` so that we can provision dashboards and
        # datasources via configuration files.
        image: docker.io/grafana/grafana:5.3.2
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
          # @TODO(mattjmcnaughton) Long term, this password should certainly not
          # be plain text nor `password`. For now, it doesn't matter as the
          # service is not accessible from the public internet.
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: password
        # Mount the volumes containing all of the config files from our
        # ConfigMaps into the proper location.
        volumeMounts:
        - name: config-volume
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: config-volume
          mountPath: /etc/grafana/provisioning/datasources/prometheus.yaml
          subPath: datasource.yaml
        - name: config-volume
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml
        - name: dashboards-volume
          mountPath: /var/lib/grafana/dashboards
      # Create volumes from our two different ConfigMaps. We can then mount
      # these volumes into the Pod, meaning the configuration files are now
      # available to Grafana.
      volumes:
        - name: config-volume
          configMap:
            name: grafana-config
        - name: dashboards-volume
          configMap:
            name: grafana-dashboards
